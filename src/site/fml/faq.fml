<?xml version="1.0" encoding="UTF-8"?>
<faqs xmlns="http://maven.apache.org/FML/1.0.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/FML/1.0.1 http://maven.apache.org/xsd/fml-1.0.1.xsd">

    <part id="background">
        <title>Background</title>
        <faq id="Infinispan">
            <question>What is Infinispan?</question>
            <answer>
                <p>
                    <a href="http://infinispan.org">Infinispan</a>
                    is an open-source Java-based clustered caching technology that provides, via ancillary libraries, a
                    remotely accessible key-value store, a Hibernate 2nd-level cache, and a Lucene Directory
                    implementation, among other features.
                </p>
            </answer>
        </faq>
        <faq id="rio">
            <question>What is Rio?</question>
            <answer>
                <p>
                    <a href="http://rio-project.org">Rio</a>
                    is an open-source distributed service framework built on
                    <a href="http://jini.org">Jini</a>
                    . Jini provides a security model, lookup service, and low-level deployment mechanisms, to which Rio
                    adds rule-based SLAs and service provisioning, simplified build, test, and deployment cycles, and a
                    dynamic container, known
                    as a Cybernode.
                </p>
            </answer>
        </faq>
        <faq id="together">
            <question>Why bring Infinispan and Rio together?</question>
            <answer>
                <p>While Infinispan provides an excellent caching option for many application requirements, it is left
                    to the user to deploy Infinispan to participating machines in a network. As a 100% Java technology,
                    however, it can easily be deployed to Rio Cybernodes allowing for a more dynamic deployment
                    scenario. Through instrumentation and monitoring it is possible to change a cluster's topology or
                    introduce/remove cluster members dynamically. Out of the box Infinispan has the ability to respond
                    to topology changes however it doesn't itself provide any ability to start or stop cluster members.
                </p>
            </answer>
        </faq>
    </part>
    <part id="jini">
        <title>Jini</title>

        <faq id="jini">
            <question>What is Jini?</question>
            <answer>
                <p>
                    Jini is a powerful distributed service technology developed and open-sourced by Sun Microsystems.
                    Sun
                    donated the intellectual property comprising the specifications and an implementation
                    to the
                    <a href="http://apache.org">Apache Software Foundation</a>
                    where they became
                    <a href="http://river.apache.org">
                        Apache River
                    </a>
                    and are seeing active development. A historical site resides at
                    <a href="http://jini.org">Jini.org</a>
                    but it is not being actively maintained.
                </p>
            </answer>
        </faq>
        <faq id="proxy">
            <question>
                What is a
                <i>proxy</i>
                ?
            </question>
            <answer>
                <p>
                    A
                    <i>proxy</i>
                    is an implementation of an interface containing at least one method that, when called, performs a
                    remote method invocation on a service implementation in another vm.
                </p>
            </answer>
        </faq>
        <faq id="smart-proxy">
            <question>
                What is a
                <i>smart-proxy</i>
                ?
            </question>
            <answer>
                <p>
                    A
                    <i>smart proxy</i>
                    is an implementation of an interface where at least one method contains logic that runs locally on
                    the
                    client vm. A smart proxy method may in its implementation call a remote method but must contain
                    additional logic that runs on the client to be considered a smart proxy.
                </p>
            </answer>
        </faq>
    </part>
    <part id="rio">
        <title>Rio</title>

        <faq id="opstring">
            <question>
                What is an
                <i>opstring</i>
                ?
            </question>
            <answer>
                <p>
                    An <i>opstring</i> (Operational String) is a configuration file used by Rio to describe the deployment profile for one or more
                    services. It can declare associations between services and provisioning
                    restrictions, among other features. Opstrings can be written in Groovy or XML. For more information see the
                    <a href="http://www.rio-project.org/opstring/opstring.html">Rio Documentation</a>
                    .
                </p>
            </answer>
        </faq>
        <faq id="cybernode">
            <question>
                What is a
                <i>cybernode</i>
                ?
            </question>
            <answer>
                <p>A <i>cybernode</i>
    is the Java service container provided by Rio. Services built with RioSpan are deployed to one or more cybernodes
    based on a provided opstring.</p>
            </answer>
        </faq>
    </part>
</faqs>
